{"version":3,"sources":["components/LocationMarker.js","assets/satellite.png","components/Satellites.js","components/Map.js","App.js","reportWebVitals.js","index.js"],"names":["LocationMarker","useState","position","setPosition","setBbox","map","useMap","useEffect","locate","on","e","latlng","flyTo","radius","accuracy","L","circle","addTo","bounds","toBBoxString","split","Marker","Popup","satIcon","icon","iconUrl","SatIcon","iconSize","iconAnchor","popupAnchor","Satellites","satellites","setData","updateLocations","a","process","axios","response","data","setInterval","above","launchPad","satlat","satlng","class","satname","Map","MapContainer","center","zoom","style","height","width","TileLayer","attribution","url","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOA6BeA,EAzBQ,WACrB,MAAgCC,mBAAS,MAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAwBF,mBAAS,IAAjC,mBAAaG,GAAb,WAEMC,EAAMC,cAcZ,OAZAC,qBAAU,WACRF,EAAIG,SACJH,EAAII,GAAG,iBAAiB,SAAUC,GAChCP,EAAYO,EAAEC,QACdN,EAAIO,MAAMF,EAAEC,OAAQ,GACpB,IAAME,EAASH,EAAEI,SACFC,IAAEC,OAAON,EAAEC,OAAQE,GAC3BI,MAAMZ,GACbD,EAAQM,EAAEQ,OAAOC,eAAeC,MAAM,WAEvC,CAACf,IAEgB,OAAbH,EAAoB,KACzB,cAACmB,EAAA,EAAD,CAAQnB,SAAUA,EAAlB,SACE,cAACoB,EAAA,EAAD,+B,0CCxBS,MAA0B,sCCMnCC,EAAUR,IAAES,KAAK,CACrBC,QAASC,EACTC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,IACjBC,YAAa,EAAE,GAAI,MAoCNC,EAjCI,WACjB,MAA8B7B,qBAA9B,mBAAO8B,EAAP,KAAmBC,EAAnB,KAWA,OATAzB,qBAAU,WACR,IAAM0B,EAAe,uCAAG,4BAAAC,EAAA,4DACNC,+CADM,SAECC,IAAM,GAAD,OADZD,+CACY,yBAFN,cAEhBE,EAFgB,yBAGfL,EAAQK,EAASC,OAHF,2CAAH,qDAKrBL,IACAM,YAAYN,EAAiB,OAC5B,IACIF,EACHA,EAAWS,MAAMnC,KAAI,SAACoC,GACpB,OACE,cAACpB,EAAA,EAAD,CACEnB,SAAU,CAACuC,EAAUC,OAAQD,EAAUE,QAEvCnB,KAAMD,EAHR,SAKE,cAACD,EAAA,EAAD,UACE,oBAAGsB,MAAM,kBAAT,sBAEE,iCAASH,EAAUI,UACnB,6BAPCJ,EAAS,UAapB,qBCrBSK,EAjBH,WACV,OACE,eAACC,EAAA,EAAD,CACEC,OAAQ,CAAC,EAAG,GACZC,KAAM,EACNC,MAAO,CAAEC,OAAQ,QAASC,MAAO,SAHnC,UAKE,cAACC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAEN,cAAC,EAAD,IACA,cAAC,EAAD,QCPSC,MAPf,WAIE,OAAO,cAAC,EAAD,CAAKR,OAHU,CAAC,EAAG,GAGSC,KAFf,KCOPQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.349f460a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Marker, Popup, useMap } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\n\r\nconst LocationMarker = () => {\r\n  const [position, setPosition] = useState(null);\r\n  const [bbox, setBbox] = useState([]);\r\n\r\n  const map = useMap();\r\n\r\n  useEffect(() => {\r\n    map.locate();\r\n    map.on(\"locationfound\", function (e) {\r\n      setPosition(e.latlng);\r\n      map.flyTo(e.latlng, 8);\r\n      const radius = e.accuracy;\r\n      const circle = L.circle(e.latlng, radius);\r\n      circle.addTo(map);\r\n      setBbox(e.bounds.toBBoxString().split(\",\"));\r\n    });\r\n  }, [map]);\r\n\r\n  return position === null ? null : (\r\n    <Marker position={position}>\r\n      <Popup>You are here.</Popup>\r\n    </Marker>\r\n  );\r\n};\r\n\r\nexport default LocationMarker;\r\n","export default __webpack_public_path__ + \"static/media/satellite.1d4364f6.png\";","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Marker, Popup } from \"react-leaflet\";\r\nimport SatIcon from \"../assets/satellite.png\";\r\nimport L from \"leaflet\";\r\n\r\nconst satIcon = L.icon({\r\n  iconUrl: SatIcon,\r\n  iconSize: [38, 38],\r\n  iconAnchor: [22, 94],\r\n  popupAnchor: [-3, -76],\r\n});\r\n\r\nconst Satellites = () => {\r\n  const [satellites, setData] = useState();\r\n\r\n  useEffect(() => {\r\n    const updateLocations = async () => {\r\n      const API_URL = process.env.REACT_APP_BASE_URL;\r\n      const response = await axios(`${API_URL}30.626945/-96.334334`);\r\n      return setData(response.data);\r\n    };\r\n    updateLocations();\r\n    setInterval(updateLocations, 5000);\r\n  }, []);\r\n  return satellites\r\n    ? satellites.above.map((launchPad) => {\r\n        return (\r\n          <Marker\r\n            position={[launchPad.satlat, launchPad.satlng]}\r\n            key={launchPad[\"satid\"]}\r\n            icon={satIcon}\r\n          >\r\n            <Popup>\r\n              <p class=\"landpad-details\">\r\n                Sat Name:\r\n                <strong>{launchPad.satname}</strong>\r\n                <br />\r\n              </p>\r\n            </Popup>\r\n          </Marker>\r\n        );\r\n      })\r\n    : \"Map is loading...\";\r\n};\r\n\r\nexport default Satellites;\r\n","import React from \"react\";\r\nimport { MapContainer, TileLayer } from \"react-leaflet\";\r\nimport LocationMarker from \"./LocationMarker\";\r\nimport Satellites from \"./Satellites\";\r\n\r\nconst Map = () => {\r\n  return (\r\n    <MapContainer\r\n      center={[0, 0]}\r\n      zoom={5}\r\n      style={{ height: \"100vh\", width: \"100vw\" }}\r\n    >\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n      <Satellites />\r\n      <LocationMarker />\r\n    </MapContainer>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport Map from \"./components/Map\";\r\n\r\nfunction App() {\r\n  const defaultCenter = [0, 0];\r\n  const defaultZoom = 4;\r\n\r\n  return <Map center={defaultCenter} zoom={defaultZoom}></Map>;\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}